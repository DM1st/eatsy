apply plugin: 'java'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

//Java utilities/helper libraries
ext.commonsLang3Version = '3.12.0'

//coveralls
ext.coverallsVersion = '2.12.0'

//test
ext.junitVersion = '5.7.0'
ext.mockitoversion = '4.5.1'
ext.springBootTestAutoConfigure = '2.6.7'
ext.hamcrestVersion = "2.2"
ext.jaywayVersion = "2.2.0"

//spring
ext.springBootVersion = '2.6.7'
ext.springFoxVersion = '3.0.0'
ext.springTestVersion = '5.3.20'

//Spring/Dependency Injection
ext.springContextVersion = '5.3.20'

//Logging
ext.log4jCoreVersion = '2.17.2'
ext.log4jApiVersion = '2.17.2'

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "PASSED", "SKIPPED", "FAILED"
        }
    }

}

buildscript {
    ext {
        springBootGradlePluginVersion = '2.6.7'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootGradlePluginVersion"
        classpath "gradle.plugin.org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.12.0"
    }
}

//JaCoCo and coveralls configuration
def allTestCoverageFile = "$buildDir/jacoco/allTestCoverage.exec"
def devProjects = subprojects.findAll { it.path != 'test' } //Exclude test code projects

task jacocoMerge(type: JacocoMerge) {
    devProjects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
    destinationFile = file(allTestCoverageFile)
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn devProjects.test, jacocoMerge

    getAdditionalSourceDirs().setFrom(files(devProjects.sourceSets.main.allSource.srcDirs))
    getSourceDirectories().setFrom(files(devProjects.sourceSets.main.allSource.srcDirs))
    getClassDirectories().setFrom(files(devProjects.sourceSets.main.output))
    executionData jacocoMerge.destinationFile

    reports {
        html.required = true // human readable
        xml.required = true // required by coveralls
    }
}

coveralls {
    sourceDirs = devProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'
    dependsOn jacocoRootReport
}
